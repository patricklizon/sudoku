name: CI

on:
  pull_request:
  push:
    branches:
      - main

env:
  CACHE_KEY_PREFIX: deps-v1

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install npm dependencies
        run: nix develop --command npm ci

      # TODO: enable, probably could be extracted and be exclusive dependency for test and e2e steps
      # - name: Install browsers
      #   run: nix develop --command npm run install-browsers

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('package-lock.json') }}

      # TODO:
      # - name: Cache Playwright browsers
      #   uses: actions/cache@v3
      #   with:
      #       path: ~/.cache/ms-playwright
      #       key: ${{ runner.os }}-playwright-${{ env.CACHE_KEY_PREFIX }}

  check:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      # Restore node_modules cache
      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('package-lock.json') }}

      # TODO: move to test stage
      # - name: Restore Playwright browsers
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/ms-playwright
      #     key: ${{ runner.os }}-playwright-${{ env.CACHE_KEY_PREFIX }}

      - name: Check format
        run: nix develop --command npm run check:format

      # - name: Check types
      #   run: nix develop --command npm run check:types

      # - name: Lint check
      #   run: nix develop --command npm run check:lint

      # TODO: move to test stage
      - name: Run unit tests
        run: nix develop --command npm run test:unit

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('package-lock.json') }}

      - name: Build
        run: nix develop --command npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: app
          path: build/
          retention-days: 14

  # TODO:
  # test:
  #   needs: [setup, browsers]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install Nix
  #       uses: cachix/install-nix-action@v20
  #       with:
  #         nix_path: nixpkgs=channel:nixos-unstable

  #     - name: Restore cache
  #       uses: actions/cache@v3
  #       with:
  #         path: node_modules
  #         key: ${{ runner.os }}-node-${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('package-lock.json') }}

  #     - name: Build
  #       run: nix develop --command npm run test:unit

  #     - name: Upload build artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dist
  #         path: result/dist/

  # TODO:
  # e2e:
  #   needs: [setup, browsers, build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install Nix
  #       uses: cachix/install-nix-action@v20
  #       with:
  #         nix_path: nixpkgs=channel:nixos-unstable
  #         extra_nix_config: |
  #           experimental-features = nix-command flakes

  #     - name: Restore cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           node_modules
  #           ~/.cache/ms-playwright
  #         key: ${{ runner.os }}-node-${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('package-lock.json') }}

  #     - name: Download build
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: dist
  #         path: dist

  #     - name: Run E2E tests
  #       run: |
  #         nix develop --command bash -c '
  #           # Start server with built files
  #           npx http-server ./dist -p 3000 &

  #           # Wait for server to start
  #           sleep 3

  #           # Run E2E tests
  #           npm run test:e2e
  #         '
